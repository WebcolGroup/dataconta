"""
DataConta CLI FREE Version - Demo
Versi√≥n simplificada de la CLI para demostrar las funcionalidades FREE implementadas.
"""

import sys
import os
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

# Importar solo lo necesario para evitar problemas con null bytes
from src.domain.services.license_manager import LicenseManager
from src.application.services.BasicStatisticsService import BasicStatisticsService, BasicStatisticsRequest
from src.infrastructure.adapters.simple_txt_logger_adapter import SimpleTxtLogger
from src.presentation.enhanced_menu_config import FreeMenuConfigManager


class DataContaFreeCLI:
    """CLI simplificada para demostrar funcionalidades FREE."""
    
    def __init__(self):
        """Inicializar la CLI con licencia FREE."""
        print("üöÄ Iniciando DataConta FREE Version...")
        
        # Inicializar componentes FREE
        self.license_manager = LicenseManager("FREE_CLI_DEMO")
        self.logger = SimpleTxtLogger(self.license_manager, "cli_logs")
        self.menu_config = FreeMenuConfigManager(self.license_manager)
        
        # Mock repository para demos
        self.mock_repository = self._create_mock_repository()
        self.stats_service = BasicStatisticsService(self.mock_repository, self.license_manager)
        
        print("‚úÖ Componentes FREE inicializados correctamente")
        self.logger.log_user_action("CLI Startup", "Usuario inici√≥ CLI FREE")
    
    def _create_mock_repository(self):
        """Crear un repository mock para las demos."""
        class MockInvoiceRepository:
            def get_invoices(self, **kwargs):
                # Simular facturas para demo
                return []  # Lista vac√≠a por simplicidad
        
        return MockInvoiceRepository()
    
    def show_main_menu(self):
        """Mostrar el men√∫ principal FREE."""
        print("\\n" + "="*60)
        print("üÜì DATACONTA FREE - MEN√ö PRINCIPAL")
        print("="*60)
        
        # Mostrar informaci√≥n de licencia
        print(f"üìã Licencia: {self.license_manager.get_license_type()}")
        print(f"üî¢ L√≠mite consultas: {self.license_manager.get_max_invoices_for_query()} facturas")
        print(f"üé® Modo GUI Lite: {'‚úÖ Disponible' if self.license_manager.is_gui_lite_mode() else '‚ùå No disponible'}")
        
        print("\\nüìÇ OPCIONES DISPONIBLES (FREE):")
        print("   1. üìä Ver estad√≠sticas b√°sicas")
        print("   2. üì§ Demostrar exportaci√≥n JSON")
        print("   3. üìã Ver configuraci√≥n de men√∫s")
        print("   4. üìù Ver logs recientes")
        print("   5. üîç Informaci√≥n de licencia FREE")
        print("   6. üí° Informaci√≥n de upgrade")
        print("   0. üö™ Salir")
        
        print("\\nüîí FUNCIONALIDADES BLOQUEADAS (Requieren PRO/ENTERPRISE):")
        print("   üö´ Reportes financieros avanzados")
        print("   üö´ Exportaci√≥n BI completa") 
        print("   üö´ An√°lisis de tendencias")
        print("   üö´ Dashboard completo")
        print("   üö´ Consultas de m√°s de 100 facturas")
        
        return input("\\nüëâ Seleccione una opci√≥n: ").strip()
    
    def show_basic_statistics(self):
        """Mostrar estad√≠sticas b√°sicas FREE."""
        print("\\nüìä ESTAD√çSTICAS B√ÅSICAS FREE")
        print("="*40)
        
        try:
            request = BasicStatisticsRequest(max_records=50)
            response = self.stats_service.calculate_basic_statistics(request)
            
            print(f"‚úÖ Servicio de estad√≠sticas: {'Operativo' if response else 'Error'}")
            print(f"üî¢ L√≠mite aplicado: {request.max_records} registros")
            print(f"üéØ Tipo de licencia: {self.license_manager.get_license_type()}")
            
            if response and response.success:
                print("üìà Estad√≠sticas calculadas exitosamente")
                if response.statistics:
                    for key, value in response.statistics.items():
                        print(f"   üìã {key}: {value}")
            else:
                print("‚ÑπÔ∏è  Demo con datos simulados - Funcionalidad operativa")
                print("   üìã Total facturas: 0 (demo)")
                print("   üìã Suma total: $0.00")
                print("   üìã Promedio: $0.00")
                print("   üìã Estado: Sistema listo para datos reales")
            
            print("\\nüí° Upgrade para m√°s estad√≠sticas:")
            print("   üíº PRO: Hasta 2,000 facturas + an√°lisis avanzado")
            print("   üè¢ ENTERPRISE: Sin l√≠mites + reportes personalizados")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error en estad√≠sticas: {e}")
        
        self.logger.log_user_action("View Statistics", "Usuario consult√≥ estad√≠sticas b√°sicas")
    
    def demo_json_export(self):
        """Demostrar la exportaci√≥n JSON FREE."""
        print("\\nüì§ DEMOSTRACI√ìN EXPORTACI√ìN JSON FREE")
        print("="*45)
        
        print("‚ú® Nueva funcionalidad para usuarios FREE:")
        print(f"üî¢ L√≠mite: {self.license_manager.get_max_invoices_for_query()} facturas por exportaci√≥n")
        print("üè∑Ô∏è  Formato: JSON estructurado con metadatos")
        print("üìä Incluye: Estad√≠sticas b√°sicas autom√°ticas")
        
        print("\\nüìã Estructura del JSON generado:")
        sample_json = '''{
  "export_info": {
    "timestamp": "2024-09-17T15:30:00Z",
    "license_type": "FREE",
    "total_records": 25,
    "format_version": "1.0",
    "exported_by": "DataConta FREE CLI"
  },
  "summary_statistics": {
    "total_amount": "75,500.00",
    "average_amount": "3,020.00",
    "currency": "COP",
    "date_range": {
      "start": "2024-09-01",
      "end": "2024-09-17"
    }
  },
  "invoices": [
    "... hasta 100 facturas ..."
  ],
  "upgrade_info": {
    "message": "Actualice a PRO para exportar m√°s de 100 facturas",
    "benefits": [
      "PRO: Hasta 2,000 facturas",
      "ENTERPRISE: Sin l√≠mites"
    ],
    "contact": "ventas@dataconta.com"
  }
}'''
        print(sample_json)
        
        print("\\nüí° Ventajas del export JSON FREE:")
        print("   üöÄ Formato moderno y est√°ndar")
        print("   üìä Metadatos completos incluidos")
        print("   üè∑Ô∏è  Estad√≠sticas autom√°ticas")
        print("   üíº Compatible con herramientas actuales")
        print("   üì± Listo para integraci√≥n")
        
        self.logger.log_user_action("Demo JSON Export", "Usuario explor√≥ exportaci√≥n JSON")
    
    def show_menu_configuration(self):
        """Mostrar la configuraci√≥n de men√∫s enhanced."""
        print("\\nüìã CONFIGURACI√ìN DE MEN√öS ENHANCED")
        print("="*42)
        
        try:
            summary = self.menu_config.get_free_license_summary()
            print("üÜì RESUMEN FREE LICENSE:")
            print(summary[:300] + "..." if len(summary) > 300 else summary)
            
            print("\\nüóÇÔ∏è  ESTRUCTURA DE MEN√öS:")
            print("   1Ô∏è‚É£  CONSULTA DE FACTURAS (6 opciones disponibles)")
            print("   2Ô∏è‚É£  EXPORTACI√ìN Y REPORTES (2 disponibles, 2 bloqueadas)")
            print("   3Ô∏è‚É£  ESTAD√çSTICAS Y BI (1 disponible, 2 bloqueadas)")
            print("   4Ô∏è‚É£  API Y CONFIGURACI√ìN (4 opciones b√°sicas)")
            print("   5Ô∏è‚É£  INFORMACI√ìN Y SOPORTE (2 opciones de ayuda)")
            
            print("\\nüîí EJEMPLO DE MENSAJE BLOQUEADO:")
            blocked_msg = self.menu_config.get_blocked_feature_message("Reportes Avanzados")
            print(f"   {blocked_msg}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error en configuraci√≥n de men√∫s: {e}")
        
        self.logger.log_user_action("View Menu Config", "Usuario consult√≥ configuraci√≥n de men√∫s")
    
    def show_recent_logs(self):
        """Mostrar logs recientes del sistema."""
        print("\\nüìù LOGS RECIENTES DEL SISTEMA")
        print("="*35)
        
        try:
            recent_logs = self.logger.get_recent_logs(max_lines=10)
            print("üìã √öltimos eventos registrados:")
            
            if recent_logs and recent_logs.strip():
                for line in recent_logs.split('\\n')[:5]:  # Mostrar solo 5 l√≠neas
                    if line.strip():
                        print(f"   {line}")
            else:
                print("   ‚ÑπÔ∏è  No hay logs disponibles en esta sesi√≥n")
            
            print("\\nüìä Tipos de logs registrados:")
            print("   ‚úÖ Validaciones de licencia")
            print("   ‚úÖ Operaciones de usuario")
            print("   ‚úÖ Acciones del sistema")
            print("   ‚úÖ Exportaciones realizadas")
            
            print("\\nüí° Logging avanzado en versiones superiores:")
            print("   üíº PRO: M√∫ltiples formatos + filtros")
            print("   üè¢ ENTERPRISE: An√°lisis de logs + alertas")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error accediendo logs: {e}")
        
        self.logger.log_user_action("View Logs", "Usuario consult√≥ logs del sistema")
    
    def show_license_info(self):
        """Mostrar informaci√≥n completa de la licencia FREE."""
        print("\\nüîç INFORMACI√ìN COMPLETA LICENCIA FREE")
        print("="*45)
        
        print(f"üìã Tipo de licencia: {self.license_manager.get_license_type()}")
        print(f"‚úÖ Estado: {'V√°lida' if self.license_manager.is_license_valid() else 'Requiere activaci√≥n'}")
        
        # Mostrar funcionalidades disponibles
        summary = self.license_manager.get_free_features_summary()
        
        print("\\n‚úÖ FUNCIONALIDADES INCLUIDAS:")
        available_features = {
            'cli_access': 'Acceso completo a l√≠nea de comandos',
            'gui_lite': 'Interfaz gr√°fica reducida',
            'csv_export': 'Exportaci√≥n a CSV b√°sica', 
            'json_export': 'Exportaci√≥n a JSON (NUEVO)',
            'basic_stats': 'Estad√≠sticas b√°sicas (NUEVO)',
            'api_verification': 'Verificaci√≥n de estado API',
            'file_management': 'Gesti√≥n b√°sica de archivos'
        }
        
        for key, description in available_features.items():
            if summary.get(key, False):
                print(f"   ‚úÖ {description}")
        
        print(f"\\nüî¢ L√çMITES APLICADOS:")
        print(f"   üìä M√°ximo facturas por consulta: {summary.get('max_invoices', 500)}")
        print(f"   üé® Modo GUI: Lite (reducido)")
        print(f"   üì§ Exportaciones: Formatos b√°sicos")
        
        print("\\nüîí FUNCIONALIDADES BLOQUEADAS:")
        if 'blocked_features' in summary:
            for feature, upgrade_msg in summary['blocked_features'].items():
                print(f"   üö´ {feature.replace('_', ' ').title()}: {upgrade_msg}")
    
    def show_upgrade_info(self):
        """Mostrar informaci√≥n de upgrade."""
        print("\\nüí° INFORMACI√ìN DE UPGRADE")
        print("="*35)
        
        print("üÜì ACTUALMENTE: FREE")
        print("   ‚úÖ Perfecto para comenzar y evaluar DataConta")
        print("   ‚úÖ Funcionalidades esenciales incluidas")
        print("   ‚úÖ Sin costo, sin compromisos")
        
        print("\\nüíº UPGRADE A PRO:")
        print("   üöÄ Hasta 2,000 facturas por consulta")
        print("   üöÄ GUI completa con todos los componentes")
        print("   üöÄ Reportes financieros avanzados")
        print("   üöÄ Exportaci√≥n BI limitada")
        print("   üöÄ Logging avanzado")
        print("   üí∞ Ideal para peque√±as y medianas empresas")
        
        print("\\nüè¢ UPGRADE A ENTERPRISE:")
        print("   üöÄ Sin l√≠mites en consultas ni exportaciones")
        print("   üöÄ BI completo e ilimitado")
        print("   üöÄ Funcionalidades avanzadas exclusivas")
        print("   üöÄ Soporte prioritario")
        print("   üöÄ Funcionalidades futuras incluidas")
        print("   üí∞ Soluci√≥n completa para grandes organizaciones")
        
        print("\\nüìû CONTACTO PARA UPGRADE:")
        print("   ‚úâÔ∏è  Email: ventas@dataconta.com")
        print("   üåê Web: www.dataconta.com")
        print("   üì± Consulta personalizada disponible")
        
        print("\\nüéÅ BENEFICIO DE SER USUARIO FREE:")
        print("   üí∞ Descuentos especiales para usuarios existentes")
        print("   üìà Migraci√≥n de datos sin costo adicional")
        print("   üéØ Onboarding personalizado incluido")
    
    def run(self):
        """Ejecutar el bucle principal de la CLI."""
        print("\\nüéâ ¬°Bienvenido a DataConta FREE!")
        print("üí° Versi√≥n completamente funcional con funcionalidades profesionales")
        
        while True:
            try:
                choice = self.show_main_menu()
                
                if choice == '0':
                    print("\\nüëã ¬°Gracias por usar DataConta FREE!")
                    print("üíå Esperamos verte pronto en PRO o ENTERPRISE")
                    self.logger.log_user_action("CLI Exit", "Usuario cerr√≥ la aplicaci√≥n")
                    break
                elif choice == '1':
                    self.show_basic_statistics()
                elif choice == '2':
                    self.demo_json_export()
                elif choice == '3':
                    self.show_menu_configuration()
                elif choice == '4':
                    self.show_recent_logs()
                elif choice == '5':
                    self.show_license_info()
                elif choice == '6':
                    self.show_upgrade_info()
                else:
                    print("\\n‚ùå Opci√≥n no v√°lida. Por favor, seleccione una opci√≥n del men√∫.")
                
                input("\\n‚èµ  Presione Enter para continuar...")
                
            except KeyboardInterrupt:
                print("\\n\\nüëã Interrupci√≥n del usuario. ¬°Hasta pronto!")
                self.logger.log_user_action("CLI Interrupt", "Usuario interrumpi√≥ la aplicaci√≥n")
                break
            except Exception as e:
                print(f"\\n‚ö†Ô∏è  Error inesperado: {e}")
                print("üí° La aplicaci√≥n continuar√° ejecut√°ndose...")


def main():
    """Funci√≥n principal."""
    try:
        cli = DataContaFreeCLI()
        cli.run()
    except Exception as e:
        print(f"‚ùå Error cr√≠tico inicializando DataConta FREE CLI: {e}")
        print("üí° Verifique la instalaci√≥n y dependencias")
        sys.exit(1)


if __name__ == "__main__":
    main()