name: Release Workflow - DataConta FREE

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.0.0-beta, etc.

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get-version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Check if prerelease
      id: check-prerelease
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        if [[ $VERSION == *"-"* ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease: $VERSION"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release: $VERSION"
        fi
        
    - name: Validate version format
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: dataconta-free-linux
            executable-name: dataconta-free
          - os: windows-latest
            artifact-name: dataconta-free-windows
            executable-name: dataconta-free.exe
          - os: macos-latest
            artifact-name: dataconta-free-macos
            executable-name: dataconta-free
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Install Qt dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        
    - name: Build executable
      run: |
        pyinstaller --onefile --windowed \
          --name ${{ matrix.executable-name }} \
          --add-data "src:src" \
          --add-data "addons:addons" \
          --add-data "menu_config.json:." \
          dataconta.py
          
    - name: Create release package
      shell: bash
      run: |
        mkdir -p release-package
        cp dist/${{ matrix.executable-name }} release-package/
        cp README.md release-package/
        cp LICENSE release-package/
        cp CHANGELOG.md release-package/
        cp VERSION release-package/
        
        # Create platform-specific package
        cd release-package
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../dataconta-free-${{ needs.validate-release.outputs.version }}-windows.zip .
        else
          tar -czf ../dataconta-free-${{ needs.validate-release.outputs.version }}-${{ runner.os }}.tar.gz .
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          dataconta-free-${{ needs.validate-release.outputs.version }}-*
        retention-days: 30

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
        
    - name: Install Qt dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        
    - name: Run tests with coverage
      run: |
        xvfb-run -a pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Generate test report
      run: |
        echo "# Test Report for Release v${{ needs.validate-release.outputs.version }}" > test-report.md
        echo "" >> test-report.md
        echo "## Coverage Summary" >> test-report.md
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = root.get('line-rate')
        print(f'- **Total Coverage**: {float(coverage)*100:.1f}%')
        " >> test-report.md
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          test-report.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, run-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: test-results/
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Extract release notes from CHANGELOG
        if [ -f "CHANGELOG.md" ]; then
          # Get section between [VERSION] and next version or EOF
          RELEASE_NOTES=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | head -n -1 | tail -n +2)
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release notes not found in CHANGELOG.md"
          fi
        else
          RELEASE_NOTES="No changelog available"
        fi
        
        # Save to file for upload
        echo "$RELEASE_NOTES" > release-notes.md
        
        # Add test coverage info
        if [ -f "test-results/test-report.md" ]; then
          echo "" >> release-notes.md
          echo "---" >> release-notes.md
          cat test-results/test-report.md >> release-notes.md
        fi
        
        echo "release-notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: DataConta FREE v${{ needs.validate-release.outputs.version }}
        body: ${{ steps.release-notes.outputs.release-notes }}
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        
    - name: Upload Release Assets
      run: |
        # Upload all build artifacts
        for file in artifacts/*/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "Uploading $filename..."
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${{ steps.create-release.outputs.upload_url }}?name=$filename"
          fi
        done

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "üéâ Release v${{ needs.validate-release.outputs.version }} created successfully!"
        echo "üì¶ Artifacts uploaded and ready for download"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"
        
    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release v${{ needs.validate-release.outputs.version }} failed!"
        echo "Please check the workflow logs for details."
        exit 1

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'  # Only for stable releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update version badges
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Update README.md with new version badge
        if [ -f "README.md" ]; then
          sed -i "s/version-[0-9.]+-/version-${VERSION}-/" README.md || true
          sed -i "s/v[0-9.]\+/v${VERSION}/g" README.md || true
        fi
        
        # Commit changes if any
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No documentation updates needed"
        else
          git add README.md
          git commit -m "docs: update version to v${VERSION}"
          git push
        fi