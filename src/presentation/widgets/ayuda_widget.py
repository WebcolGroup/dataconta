"""
Widget especializado para el tab de ayuda y soporte.
"""

import os
from typing import Optional
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QGroupBox, 
    QPushButton, QScrollArea, QFrame, QMessageBox, QDialog,
    QTextEdit, QDialogButtonBox, QLineEdit, QFormLayout
)
from PySide6.QtCore import Signal, QObject, Qt
from PySide6.QtGui import QFont


class SiigoConfigDialog(QDialog):
    """
    Di√°logo especializado para configurar credenciales de Siigo API.
    Permite editar el archivo .env con las credenciales necesarias.
    """
    
    def __init__(self, parent=None):
        """Inicializar el configurador de credenciales Siigo."""
        super().__init__(parent)
        self.setWindowTitle("üîê Configuraci√≥n de Credenciales Siigo API")
        self.setMinimumSize(600, 500)
        self.resize(700, 550)
        self.setWindowFlags(Qt.Dialog | Qt.WindowCloseButtonHint)
        self._setup_ui()
        self._load_current_config()
    
    def _setup_ui(self):
        """Configurar la interfaz del di√°logo de configuraci√≥n."""
        layout = QVBoxLayout(self)
        
        # T√≠tulo y descripci√≥n
        title_label = QLabel("üîê Configuraci√≥n de Credenciales Siigo API")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1976d2;
                padding: 10px;
                background-color: #f5f5f5;
                border-radius: 5px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        # Descripci√≥n
        desc_label = QLabel(
            "üîß Configure las credenciales necesarias para conectar DataConta con la API de Siigo. "
            "Estas credenciales se guardar√°n de forma segura en el archivo de configuraci√≥n local."
        )
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 11px;
                padding: 10px;
                margin-bottom: 15px;
                background-color: #fff3e0;
                border-radius: 5px;
                border-left: 4px solid #ff9800;
            }
        """)
        layout.addWidget(desc_label)
        
        # Formulario de configuraci√≥n
        form_group = QGroupBox("üìù Credenciales de Conexi√≥n")
        form_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #dee2e6;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px 0 10px;
                background-color: white;
            }
        """)
        form_layout = QFormLayout(form_group)
        form_layout.setSpacing(15)
        form_layout.setContentsMargins(20, 25, 20, 20)
        
        # Estilo para campos de entrada
        input_style = """
            QLineEdit {
                padding: 10px 12px;
                border: 2px solid #dee2e6;
                border-radius: 6px;
                font-size: 11pt;
                background-color: #ffffff;
            }
            QLineEdit:focus {
                border-color: #1976d2;
                background-color: #f8f9fa;
            }
        """
        
        # Campo URL API
        self.api_url_input = QLineEdit()
        self.api_url_input.setStyleSheet(input_style)
        self.api_url_input.setPlaceholderText("https://api.siigo.com")
        form_layout.addRow("üåê URL de la API:", self.api_url_input)
        
        # Campo Usuario
        self.user_input = QLineEdit()
        self.user_input.setStyleSheet(input_style)
        self.user_input.setPlaceholderText("usuario@ejemplo.com")
        form_layout.addRow("üë§ Usuario/Email:", self.user_input)
        
        # Campo Access Key
        self.access_key_input = QLineEdit()
        self.access_key_input.setStyleSheet(input_style)
        self.access_key_input.setPlaceholderText("Su clave de acceso API")
        self.access_key_input.setEchoMode(QLineEdit.Password)
        form_layout.addRow("üîë Access Key:", self.access_key_input)
        
        # Campo Partner ID
        self.partner_id_input = QLineEdit()
        self.partner_id_input.setStyleSheet(input_style)
        self.partner_id_input.setPlaceholderText("SandboxSiigoAPI")
        form_layout.addRow("üè¢ Partner ID:", self.partner_id_input)
        
        layout.addWidget(form_group)
        
        # Bot√≥n para mostrar/ocultar Access Key
        show_key_btn = QPushButton("üëÅÔ∏è Mostrar/Ocultar Access Key")
        show_key_btn.setStyleSheet("""
            QPushButton {
                background-color: #f8f9fa;
                color: #495057;
                border: 1px solid #dee2e6;
                padding: 6px 12px;
                border-radius: 4px;
                font-size: 10pt;
            }
            QPushButton:hover {
                background-color: #e9ecef;
            }
        """)
        show_key_btn.clicked.connect(self._toggle_access_key_visibility)
        layout.addWidget(show_key_btn)
        
        # Botones de acci√≥n
        button_layout = QHBoxLayout()
        
        # Bot√≥n probar conexi√≥n
        test_btn = QPushButton("üîó Probar Conexi√≥n")
        test_btn.setToolTip("Verificar que las credenciales funcionen")
        test_btn.clicked.connect(self._test_connection)
        test_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196f3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 11pt;
            }
            QPushButton:hover {
                background-color: #1976d2;
            }
        """)
        button_layout.addWidget(test_btn)
        
        # Bot√≥n guardar
        save_btn = QPushButton("üíæ Guardar Configuraci√≥n")
        save_btn.clicked.connect(self._save_config)
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4caf50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 11pt;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        button_layout.addWidget(save_btn)
        
        button_layout.addStretch()
        
        # Bot√≥n cancelar
        cancel_btn = QPushButton("‚ùå Cancelar")
        cancel_btn.clicked.connect(self.reject)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #666;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 11pt;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        button_layout.addWidget(cancel_btn)
        
        layout.addLayout(button_layout)
        
        # Informaci√≥n adicional
        info_label = QLabel(
            "üí° Nota: Las credenciales se almacenan localmente en el archivo .env. "
            "Nunca comparta sus credenciales de acceso con terceros."
        )
        info_label.setWordWrap(True)
        info_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 10px;
                padding: 10px;
                background-color: #e8f5e8;
                border-radius: 4px;
                margin-top: 10px;
            }
        """)
        layout.addWidget(info_label)
    
    def _load_current_config(self):
        """Cargar configuraci√≥n actual desde el archivo .env."""
        try:
            env_path = ".env"
            if os.path.exists(env_path):
                with open(env_path, 'r', encoding='utf-8') as file:
                    content = file.read()
                
                # Parsear valores existentes
                for line in content.split('\n'):
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        key = key.strip()
                        value = value.strip()
                        
                        if key == 'SIIGO_API_URL':
                            self.api_url_input.setText(value)
                        elif key == 'SIIGO_USER':
                            self.user_input.setText(value)
                        elif key == 'SIIGO_ACCESS_KEY':
                            self.access_key_input.setText(value)
                        elif key == 'PARTNER_ID':
                            self.partner_id_input.setText(value)
            else:
                # Valores por defecto si no existe .env
                self.api_url_input.setText("https://api.siigo.com")
                self.partner_id_input.setText("SandboxSiigoAPI")
                
        except Exception as e:
            print(f"Error cargando configuraci√≥n: {e}")
            # Valores por defecto en caso de error
            self.api_url_input.setText("https://api.siigo.com")
            self.partner_id_input.setText("SandboxSiigoAPI")
    
    def _toggle_access_key_visibility(self):
        """Alternar visibilidad del Access Key."""
        if self.access_key_input.echoMode() == QLineEdit.Password:
            self.access_key_input.setEchoMode(QLineEdit.Normal)
        else:
            self.access_key_input.setEchoMode(QLineEdit.Password)
    
    def _test_connection(self):
        """Probar la conexi√≥n con las credenciales ingresadas."""
        # Validar que todos los campos est√©n completos
        if not all([
            self.api_url_input.text().strip(),
            self.user_input.text().strip(),
            self.access_key_input.text().strip(),
            self.partner_id_input.text().strip()
        ]):
            QMessageBox.warning(
                self,
                "‚ö†Ô∏è Campos Incompletos",
                "Por favor, complete todos los campos antes de probar la conexi√≥n."
            )
            return
        
        # Mostrar mensaje de prueba (aqu√≠ se implementar√≠a la conexi√≥n real)
        QMessageBox.information(
            self,
            "üîó Prueba de Conexi√≥n",
            "üîÑ Probando conexi√≥n con Siigo API...\n\n"
            "üöÄ Esta funcionalidad se implementar√° para hacer una llamada de prueba "
            "a la API de Siigo con las credenciales proporcionadas.\n\n"
            "üìä Por ahora, proceda a guardar la configuraci√≥n si las credenciales son correctas."
        )
    
    def _save_config(self):
        """Guardar configuraci√≥n en el archivo .env."""
        try:
            # Validar campos obligatorios
            if not all([
                self.api_url_input.text().strip(),
                self.user_input.text().strip(),
                self.access_key_input.text().strip(),
                self.partner_id_input.text().strip()
            ]):
                QMessageBox.warning(
                    self,
                    "‚ö†Ô∏è Campos Incompletos",
                    "Por favor, complete todos los campos antes de guardar."
                )
                return
            
            # Contenido del archivo .env
            env_content = f"""# Siigo API Configuration
# Configuraci√≥n con credenciales actualizadas desde DataConta

# Siigo API Configuration (Credenciales configuradas)
SIIGO_API_URL={self.api_url_input.text().strip()}
SIIGO_USER={self.user_input.text().strip()}
SIIGO_ACCESS_KEY={self.access_key_input.text().strip()}
PARTNER_ID={self.partner_id_input.text().strip()}

# License Configuration (Actualizado para nuevo sistema)
LICENSE=pro
LICENSE_URL=https://demo-license-server.local/validate

# Nueva clave de licencia con formato actualizado
# Ejemplo de licencia Professional para testing
LICENSE_KEY=PROF-2024-TEST-DEMO-001A

# Output Configuration
OUTPUT_DIR=./outputs

# Optional: Logging Configuration
LOG_LEVEL=INFO
LOG_FILE=app.log
"""
            
            # Escribir archivo .env
            with open(".env", 'w', encoding='utf-8') as file:
                file.write(env_content)
            
            # Confirmar √©xito
            QMessageBox.information(
                self,
                "‚úÖ Configuraci√≥n Guardada",
                "üéâ Las credenciales de Siigo API se han guardado correctamente.\n\n"
                "üìù Archivo .env actualizado con:\n"
                f"‚Ä¢ URL API: {self.api_url_input.text().strip()}\n"
                f"‚Ä¢ Usuario: {self.user_input.text().strip()}\n"
                f"‚Ä¢ Partner ID: {self.partner_id_input.text().strip()}\n\n"
                "üîÑ Reinicie la aplicaci√≥n para que los cambios surtan efecto."
            )
            
            self.accept()
            
        except Exception as e:
            QMessageBox.critical(
                self,
                "‚ùå Error",
                f"No se pudo guardar la configuraci√≥n:\n{str(e)}\n\n"
                "Verifique que tenga permisos de escritura en el directorio."
            )
    
    @staticmethod
    def needs_configuration() -> bool:
        """
        Verificar si se necesita configuraci√≥n de Siigo API.
        
        Returns:
            bool: True si no existe .env o est√° vac√≠o/incompleto
        """
        try:
            env_path = ".env"
            if not os.path.exists(env_path):
                return True
            
            # Verificar si tiene las claves necesarias
            with open(env_path, 'r', encoding='utf-8') as file:
                content = file.read().strip()
            
            if not content:
                return True
            
            # Verificar claves obligatorias
            required_keys = ['SIIGO_API_URL', 'SIIGO_USER', 'SIIGO_ACCESS_KEY', 'PARTNER_ID']
            config_keys = []
            
            for line in content.split('\n'):
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key = line.split('=', 1)[0].strip()
                    config_keys.append(key)
            
            # Si falta alguna clave obligatoria
            return not all(key in config_keys for key in required_keys)
            
        except Exception:
            # En caso de error, asumir que se necesita configuraci√≥n
            return True
    
    @staticmethod
    def auto_open_if_needed(parent=None) -> bool:
        """
        Abrir autom√°ticamente el configurador si es necesario.
        
        Args:
            parent: Widget padre para el di√°logo
            
        Returns:
            bool: True si se abri√≥ y configur√≥ exitosamente
        """
        if SiigoConfigDialog.needs_configuration():
            try:
                dialog = SiigoConfigDialog(parent)
                dialog.setWindowTitle("üîê Configuraci√≥n Inicial - Siigo API")
                
                # Mostrar mensaje explicativo
                QMessageBox.information(
                    parent if parent else None,
                    "‚öôÔ∏è Configuraci√≥n Requerida",
                    "üîß <b>Configuraci√≥n Inicial de DataConta</b><br><br>"
                    "üìã Para conectar con Siigo API, necesita configurar "
                    "las credenciales de acceso.<br><br>"
                    "üîê A continuaci√≥n se abrir√° el configurador donde podr√° "
                    "ingresar sus credenciales de forma segura.<br><br>"
                    "üí° <i>Puede omitir esta configuraci√≥n y hacerla m√°s tarde "
                    "desde el men√∫ de Ayuda.</i>"
                )
                
                result = dialog.exec()
                return result == QDialog.Accepted
                
            except Exception:
                return False
        
        return True  # Ya est√° configurado


class LogViewerDialog(QDialog):
    """
    Di√°logo especializado para mostrar logs de actividad del sistema.
    Migrado desde el LogWidget de la parte inferior de la aplicaci√≥n.
    """
    
    def __init__(self, parent=None):
        """Inicializar el visor de logs en modal."""
        super().__init__(parent)
        self.setWindowTitle("üìä Logs del Sistema - DataConta")
        self.setMinimumSize(800, 600)
        self.resize(1000, 700)
        self.setWindowFlags(Qt.Dialog | Qt.WindowMaximizeButtonHint | Qt.WindowCloseButtonHint)
        self._setup_ui()
        self._load_logs()
    
    def _setup_ui(self):
        """Configurar la interfaz del di√°logo de logs."""
        layout = QVBoxLayout(self)
        
        # T√≠tulo y descripci√≥n
        title_label = QLabel("üìä Log de Actividades del Sistema")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #1976d2;
                padding: 10px;
                background-color: #f5f5f5;
                border-radius: 5px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        # Descripci√≥n
        desc_label = QLabel(
            "üîç Visualizaci√≥n en tiempo real de las actividades del sistema, conexiones API, "
            "operaciones de usuario y eventos importantes de DataConta."
        )
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 11px;
                padding: 5px;
                margin-bottom: 10px;
            }
        """)
        layout.addWidget(desc_label)
        
        # √Årea de texto para logs
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            QTextEdit { 
                background-color: #2c3e50; 
                color: #ecf0f1; 
                font-family: 'Courier New', monospace; 
                font-size: 9pt; 
                border: 2px solid #1976d2;
                border-radius: 5px;
                padding: 10px;
                selection-background-color: #3498db;
            }
        """)
        layout.addWidget(self.log_text)
        
        # Informaci√≥n de archivos de log
        self.files_info = QLabel()
        self.files_info.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 10px;
                padding: 5px;
                background-color: #f9f9f9;
                border-radius: 3px;
                margin-top: 5px;
            }
        """)
        layout.addWidget(self.files_info)
        
        # Botones
        button_layout = QHBoxLayout()
        
        # Bot√≥n actualizar
        refresh_btn = QPushButton("üîÑ Actualizar")
        refresh_btn.setToolTip("Recargar logs m√°s recientes")
        refresh_btn.clicked.connect(self._load_logs)
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196f3;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976d2;
            }
        """)
        button_layout.addWidget(refresh_btn)
        
        # Bot√≥n limpiar
        clear_btn = QPushButton("üóëÔ∏è Limpiar Vista")
        clear_btn.setToolTip("Limpiar contenido de la vista actual")
        clear_btn.clicked.connect(self.log_text.clear)
        clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #ff5722;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d84315;
            }
        """)
        button_layout.addWidget(clear_btn)
        
        button_layout.addStretch()
        
        # Bot√≥n cerrar
        close_btn = QPushButton("‚úñÔ∏è Cerrar")
        close_btn.clicked.connect(self.accept)
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #666;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #555;
            }
        """)
        button_layout.addWidget(close_btn)
        
        layout.addLayout(button_layout)
    
    def _load_logs(self):
        """Cargar contenido de logs desde archivos y actividad actual."""
        try:
            # Limpiar contenido actual
            self.log_text.clear()
            
            # Buscar y cargar archivos de log
            log_files = self._get_log_files()
            total_lines = 0
            
            # Mostrar logs m√°s recientes primero
            self.log_text.append("=" * 80)
            self.log_text.append("üìä LOGS DEL SISTEMA DATACONTA - ACTIVIDAD RECIENTE")
            self.log_text.append("=" * 80)
            self.log_text.append("")
            
            # Cargar desde app.log (log principal)
            if os.path.exists('app.log'):
                self.log_text.append("üìù === LOG PRINCIPAL (app.log) ===")
                lines_added = self._load_log_file('app.log', max_lines=100)
                total_lines += lines_added
                self.log_text.append("")
            
            # Cargar logs de GUI m√°s recientes
            gui_logs = [f for f in log_files if 'gui_logs' in f]
            if gui_logs:
                # Tomar el m√°s reciente
                recent_gui = sorted(gui_logs, key=os.path.getmtime)[-1]
                self.log_text.append(f"üì± === LOG GUI RECIENTE ({os.path.basename(recent_gui)}) ===")
                lines_added = self._load_log_file(recent_gui, max_lines=50)
                total_lines += lines_added
                self.log_text.append("")
            
            # Informaci√≥n de archivos encontrados
            files_count = len(log_files)
            self.files_info.setText(
                f"üìÅ {files_count} archivos de log encontrados ‚Ä¢ "
                f"üìã {total_lines} l√≠neas cargadas ‚Ä¢ "
                f"üîÑ √öltima actualizaci√≥n: {self._get_current_timestamp()}"
            )
            
            # Auto-scroll al final
            cursor = self.log_text.textCursor()
            cursor.movePosition(cursor.MoveOperation.End)
            self.log_text.setTextCursor(cursor)
            
        except Exception as e:
            self.log_text.append(f"‚ùå Error cargando logs: {str(e)}")
    
    def _load_log_file(self, file_path: str, max_lines: int = 100) -> int:
        """Cargar contenido de un archivo de log espec√≠fico."""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                lines = file.readlines()
                
            # Tomar las √∫ltimas N l√≠neas
            recent_lines = lines[-max_lines:] if len(lines) > max_lines else lines
            
            for line in recent_lines:
                self.log_text.append(line.rstrip())
            
            return len(recent_lines)
            
        except Exception as e:
            self.log_text.append(f"‚ùå Error leyendo {file_path}: {str(e)}")
            return 0
    
    def _get_log_files(self) -> list:
        """Obtener lista de archivos de log disponibles."""
        log_files = []
        log_dirs = ['logs/', 'cli_logs/', 'gui_logs/', 'test_logs/', 'pro_gui_logs/']
        
        for log_dir in log_dirs:
            if os.path.exists(log_dir):
                files = [f for f in os.listdir(log_dir) if f.endswith('.txt')]
                log_files.extend([os.path.join(log_dir, f) for f in files])
        
        if os.path.exists('app.log'):
            log_files.append('app.log')
        
        return log_files
    
    def _get_current_timestamp(self) -> str:
        """Obtener timestamp actual formateado."""
        from datetime import datetime
        return datetime.now().strftime("%H:%M:%S")


class AyudaWidget(QWidget):
    """
    Widget especializado para mostrar opciones de ayuda y soporte.
    Siguiendo principios de arquitectura hexagonal y SOLID.
    """
    
    # Se√±ales para comunicaci√≥n con otros componentes
    documentacion_requested = Signal()
    logs_requested = Signal()
    siigo_config_requested = Signal()
    upgrade_requested = Signal()
    
    def __init__(self, parent: Optional[QWidget] = None):
        """
        Inicializar widget de ayuda.
        
        Args:
            parent: Widget padre opcional
        """
        super().__init__(parent)
        self.setObjectName("AyudaWidget")
        self._setup_ui()
        self._connect_signals()
    
    def _setup_ui(self) -> None:
        """Configurar la interfaz de usuario del widget de ayuda."""
        # Layout principal
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        
        # T√≠tulo principal
        titulo_group = self._create_titulo_section()
        main_layout.addWidget(titulo_group)
        
        # Secci√≥n de men√∫s de ayuda
        menus_group = self._create_menus_section()
        main_layout.addWidget(menus_group)
        
        # Espaciador flexible
        main_layout.addStretch()
    
    def _create_titulo_section(self) -> QGroupBox:
        """Crear secci√≥n del t√≠tulo principal."""
        titulo_group = QGroupBox("‚ùì Centro de Ayuda DataConta")
        titulo_group.setStyleSheet("""
            QGroupBox { 
                border: none; 
                font-weight: 700; 
                font-size: 16px;
                color: #1976d2;
                padding-top: 10px;
                margin-top: 5px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
            }
        """)
        titulo_layout = QVBoxLayout(titulo_group)
        titulo_layout.setContentsMargins(15, 25, 15, 15)
        
        descripcion = QLabel("""
        üéØ Encuentre toda la informaci√≥n y soporte que necesita:
        
        üìö Documentaci√≥n completa y gu√≠as de uso
        ‚ÑπÔ∏è Informaci√≥n sobre la aplicaci√≥n y versi√≥n
        üìä Acceso a logs del sistema para diagn√≥stico
        üöÄ Opciones para actualizar a versiones Pro/Enterprise
        """)
        descripcion.setWordWrap(True)
        descripcion.setStyleSheet("""
            background-color: #f8f9fa; 
            padding: 15px; 
            border-radius: 8px;
            border: 1px solid #e9ecef;
            color: #495057;
            font-weight: normal;
            font-size: 12px;
            line-height: 1.5;
        """)
        titulo_layout.addWidget(descripcion)
        return titulo_group
    
    def _create_menus_section(self) -> QGroupBox:
        """Crear secci√≥n de men√∫s de ayuda."""
        menus_group = QGroupBox("üîß Opciones de Ayuda")
        menus_group.setStyleSheet("""
            QGroupBox { 
                border: none; 
                font-weight: 700; 
                font-size: 15px;
                color: #2c3e50;
                padding-top: 10px;
                margin-top: 8px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
            }
        """)
        menus_layout = QVBoxLayout(menus_group)
        menus_layout.setSpacing(12)
        menus_layout.setContentsMargins(15, 25, 15, 15)
        
        # Estilo com√∫n para botones de ayuda
        button_style = self._get_button_style()
        
        # Crear botones de ayuda
        buttons_data = [
            {
                "text": "üìö Documentaci√≥n",
                "tooltip": self._get_documentacion_tooltip(),
                "handler": self._handle_documentacion,
                "style": button_style
            },
            {
                "text": "‚ÑπÔ∏è Acerca de DataConta",
                "tooltip": self._get_acerca_de_tooltip(),
                "handler": self._handle_acerca_de,
                "style": button_style
            },
            {
                "text": "üìä Ver Logs del Sistema",
                "tooltip": self._get_logs_tooltip(),
                "handler": self._handle_logs,
                "style": button_style
            },
            {
                "text": "‚öôÔ∏è Configurar Siigo API",
                "tooltip": self._get_siigo_config_tooltip(),
                "handler": self._handle_siigo_config,
                "style": self._get_siigo_config_button_style()
            },
            {
                "text": "üöÄ Actualizar a Pro/Enterprise",
                "tooltip": self._get_upgrade_tooltip(),
                "handler": self._handle_upgrade,
                "style": self._get_upgrade_button_style()
            }
        ]
        
        for button_data in buttons_data:
            button = self._create_help_button(**button_data)
            menus_layout.addWidget(button)
        
        return menus_group
    
    def _create_help_button(self, text: str, tooltip: str, handler, style: str) -> QPushButton:
        """Crear un bot√≥n de ayuda con configuraci√≥n espec√≠fica."""
        button = QPushButton(text)
        button.setToolTip(tooltip)
        button.setStyleSheet(style)
        button.clicked.connect(handler)
        return button
    
    def _get_button_style(self) -> str:
        """Obtener estilo com√∫n para botones de ayuda."""
        return """
            QPushButton { 
                background-color: #ffffff;
                color: #495057;
                padding: 15px 20px; 
                border: 2px solid #dee2e6;
                border-radius: 8px; 
                font-weight: bold; 
                font-size: 12pt;
                text-align: left;
                min-height: 40px;
            }
            QPushButton:hover { 
                background-color: #f8f9fa;
                border-color: #1976d2;
                color: #1976d2;
            }
            QPushButton:pressed {
                background-color: #e3f2fd;
            }
        """
    
    def _get_upgrade_button_style(self) -> str:
        """Obtener estilo especial para bot√≥n de upgrade."""
        base_style = self._get_button_style()
        return base_style.replace("#ffffff", "#fff3e0") \
                         .replace("#dee2e6", "#ff9800") \
                         .replace("#1976d2", "#f57c00") \
                         .replace("#f8f9fa", "#ffe0b2")
    
    def _get_siigo_config_button_style(self) -> str:
        """Obtener estilo especial para bot√≥n de configuraci√≥n Siigo."""
        base_style = self._get_button_style()
        return base_style.replace("#ffffff", "#f3e5f5") \
                         .replace("#dee2e6", "#9c27b0") \
                         .replace("#1976d2", "#7b1fa2") \
                         .replace("#f8f9fa", "#e1bee7")
    
    def _get_documentacion_tooltip(self) -> str:
        """Obtener tooltip para bot√≥n de documentaci√≥n."""
        return (
            "üìö Acceder a la documentaci√≥n completa:\n"
            "‚Ä¢ Gu√≠a de usuario paso a paso\n"
            "‚Ä¢ Manual de funcionalidades\n"
            "‚Ä¢ Preguntas frecuentes (FAQ)\n"
            "‚Ä¢ Tutoriales y ejemplos\n\n"
            "üîó Abre la documentaci√≥n en el navegador"
        )
    
    def _get_acerca_de_tooltip(self) -> str:
        """Obtener tooltip para bot√≥n acerca de."""
        return (
            "‚ÑπÔ∏è Informaci√≥n sobre la aplicaci√≥n:\n"
            "‚Ä¢ Versi√≥n actual del software\n"
            "‚Ä¢ Informaci√≥n del desarrollador\n"
            "‚Ä¢ Licencias y t√©rminos de uso\n"
            "‚Ä¢ Cr√©ditos y reconocimientos\n\n"
            "üìã Muestra ventana con informaci√≥n detallada"
        )
    
    def _get_logs_tooltip(self) -> str:
        """Obtener tooltip para bot√≥n de logs."""
        return (
            "üìä Acceder a los logs del sistema:\n"
            "‚Ä¢ Logs de ejecuci√≥n actual\n"
            "‚Ä¢ Historial de errores\n"
            "‚Ä¢ Logs de conexiones API\n"
            "‚Ä¢ Diagn√≥stico de problemas\n\n"
            "üîç √ötil para soporte t√©cnico"
        )
    
    def _get_siigo_config_tooltip(self) -> str:
        """Obtener tooltip para bot√≥n de configuraci√≥n Siigo."""
        return (
            "‚öôÔ∏è Configurar credenciales de Siigo API:\n"
            "‚Ä¢ URL del servidor API\n"
            "‚Ä¢ Usuario y credenciales de acceso\n"
            "‚Ä¢ Partner ID de integraci√≥n\n"
            "‚Ä¢ Validaci√≥n de conectividad\n\n"
            "üîê Gestiona tu conexi√≥n con Siigo de forma segura"
        )
    
    def _get_upgrade_tooltip(self) -> str:
        """Obtener tooltip para bot√≥n de upgrade."""
        return (
            "üöÄ Opciones de actualizaci√≥n:\n"
            "‚Ä¢ DataConta Pro: Funcionalidades avanzadas\n"
            "‚Ä¢ DataConta Enterprise: Para empresas\n"
            "‚Ä¢ Comparaci√≥n de versiones\n"
            "‚Ä¢ Precios y licenciamiento\n\n"
            "üíé Desbloquea todas las funcionalidades"
        )
    
    def _connect_signals(self) -> None:
        """Conectar se√±ales internas."""
        # Las se√±ales ya est√°n conectadas en _create_help_button
        pass
    
    # ==================== Handlers para acciones de ayuda ====================
    
    def _handle_documentacion(self) -> None:
        """Manejar clic en Documentaci√≥n."""
        QMessageBox.information(
            self,
            "üìö Documentaci√≥n",
            "üîó Abriendo documentaci√≥n de DataConta...\n\n"
            "üìñ La documentaci√≥n incluye:\n"
            "‚Ä¢ Manual de usuario completo\n"
            "‚Ä¢ Gu√≠a de configuraci√≥n API Siigo\n"
            "‚Ä¢ Resoluci√≥n de problemas comunes\n"
            "‚Ä¢ Ejemplos de uso y mejores pr√°cticas\n\n"
            "üåê Se abrir√° en su navegador web por defecto."
        )
        # Emitir se√±al para posible manejo externo
        self.documentacion_requested.emit()
    
    def _handle_acerca_de(self) -> None:
        """Manejar clic en Acerca de."""
        QMessageBox.about(
            self,
            "‚ÑπÔ∏è Acerca de DataConta",
            "üè¢ <b>DataConta FREE</b><br>"
            "üìä Sistema de Gesti√≥n y An√°lisis de Facturas<br><br>"
            "<b>Versi√≥n:</b> 2.0.0 FREE<br>"
            "<b>Arquitectura:</b> No Monol√≠tica (Hexagonal)<br>"
            "<b>API:</b> Siigo Integration<br>"
            "<b>Tecnolog√≠a:</b> Python + PySide6<br><br>"
            "<b>Desarrollado por:</b><br>"
            "üè™ WebcolGroup<br>"
            "üìß Contacto: info@webcolgroup.com<br><br>"
            "<b>Licencia:</b> Uso comercial limitado<br>"
            "<b>Copyright:</b> ¬© 2025 WebcolGroup<br><br>"
            "üöÄ <i>Actualice a PRO para funcionalidades avanzadas</i>"
        )
    
    def _handle_logs(self) -> None:
        """Manejar clic en Logs - Abrir modal con visualizaci√≥n completa."""
        try:
            # Crear y mostrar el di√°logo de logs
            log_dialog = LogViewerDialog(self)
            log_dialog.exec()
            
            # Emitir se√±al para posible manejo externo
            self.logs_requested.emit()
            
        except Exception as e:
            # Fallback al mensaje simple si hay error
            QMessageBox.critical(
                self,
                "‚ùå Error",
                f"No se pudo abrir el visor de logs:\n{str(e)}\n\n"
                "Por favor, verifique que los archivos de log est√©n accesibles."
            )
    
    def _handle_siigo_config(self) -> None:
        """Manejar clic en Configurar Siigo API - Abrir modal de configuraci√≥n."""
        try:
            # Crear y mostrar el di√°logo de configuraci√≥n Siigo
            config_dialog = SiigoConfigDialog(self)
            result = config_dialog.exec()
            
            if result == QDialog.Accepted:
                # Configuraci√≥n guardada exitosamente
                QMessageBox.information(
                    self,
                    "‚úÖ Configuraci√≥n Aplicada",
                    "üéâ La configuraci√≥n de Siigo API ha sido aplicada correctamente.\n\n"
                    "üîÑ Para que los cambios surtan efecto completamente, "
                    "es recomendable reiniciar la aplicaci√≥n.\n\n"
                    "üöÄ ¬°DataConta est√° listo para conectar con Siigo!"
                )
            
            # Emitir se√±al para posible manejo externo
            self.siigo_config_requested.emit()
            
        except Exception as e:
            # Fallback al mensaje de error si hay problemas
            QMessageBox.critical(
                self,
                "‚ùå Error de Configuraci√≥n",
                f"No se pudo abrir el configurador de Siigo API:\n{str(e)}\n\n"
                "Por favor, verifique los permisos del sistema y vuelva a intentar."
            )
    
    def _handle_upgrade(self) -> None:
        """Manejar clic en Actualizar a Pro/Enterprise."""
        reply = QMessageBox.question(
            self,
            "üöÄ Actualizar DataConta",
            "üíé <b>Actualice a DataConta PRO/Enterprise</b><br><br>"
            "<b>üèÜ DataConta PRO incluye:</b><br>"
            "‚Ä¢ üìä Reportes avanzados y dashboards<br>"
            "‚Ä¢ ü§ñ Automatizaci√≥n de procesos<br>"
            "‚Ä¢ üìà An√°lisis predictivo de ventas<br>"
            "‚Ä¢ üîÑ Sincronizaci√≥n en tiempo real<br>"
            "‚Ä¢ üéØ Alertas personalizables<br><br>"
            "<b>üè¢ DataConta Enterprise incluye:</b><br>"
            "‚Ä¢ üë• Gesti√≥n multi-usuario<br>"
            "‚Ä¢ üîê Seguridad empresarial<br>"
            "‚Ä¢ ‚òÅÔ∏è Despliegue en la nube<br>"
            "‚Ä¢ üÜò Soporte t√©cnico 24/7<br>"
            "‚Ä¢ üîß Personalizaci√≥n avanzada<br><br>"
            "¬øDesea obtener m√°s informaci√≥n sobre las versiones PRO?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.Yes
        )
        
        if reply == QMessageBox.Yes:
            self._show_contact_info()
        
        # Emitir se√±al para posible manejo externo
        self.upgrade_requested.emit()
    
    def _show_contact_info(self) -> None:
        """Mostrar informaci√≥n de contacto comercial."""
        QMessageBox.information(
            self,
            "üìû Contacto Comercial",
            "üè™ <b>Contacte con WebcolGroup</b><br><br>"
            "üìß <b>Email:</b> ventas@webcolgroup.com<br>"
            "üì± <b>WhatsApp:</b> +57 300 123 4567<br>"
            "üåê <b>Web:</b> www.webcolgroup.com<br><br>"
            "‚è∞ <b>Horario de atenci√≥n:</b><br>"
            "Lunes a Viernes: 8:00 AM - 6:00 PM<br>"
            "S√°bados: 9:00 AM - 1:00 PM<br><br>"
            "üéÅ <b>Oferta especial:</b><br>"
            "¬°Descuento del 30% por actualizaci√≥n desde FREE!<br><br>"
            "üíº Nuestro equipo comercial se pondr√° en contacto."
        )
    
    def _scan_log_files(self) -> list:
        """Escanear y obtener lista de archivos de log."""
        log_files = []
        log_dirs = ['logs/', 'cli_logs/', 'gui_logs/', 'test_logs/', 'pro_gui_logs/']
        
        for log_dir in log_dirs:
            if os.path.exists(log_dir):
                files = [f for f in os.listdir(log_dir) if f.endswith('.txt')]
                log_files.extend([f"{log_dir}{f}" for f in files])
        
        if os.path.exists('app.log'):
            log_files.append('app.log')
            
        return log_files
    
    def _format_log_files_list(self, log_files: list) -> str:
        """Formatear lista de archivos de log para mostrar."""
        files_text = "\n".join([f"‚Ä¢ {f}" for f in log_files[:10]])  # Mostrar max 10
        if len(log_files) > 10:
            files_text += f"\n... y {len(log_files) - 10} archivos m√°s"
        return files_text
    
    # ==================== M√©todos p√∫blicos para integraci√≥n ====================
    
    def refresh_logs_info(self) -> None:
        """Actualizar informaci√≥n de logs (llamado externamente si es necesario)."""
        # M√©todo para futuras expansiones si se necesita actualizar info din√°micamente
        pass
    
    def set_version_info(self, version: str, build: str = "") -> None:
        """Actualizar informaci√≥n de versi√≥n (para futuras expansiones)."""
        # M√©todo para futuras expansiones si se necesita versi√≥n din√°mica
        pass