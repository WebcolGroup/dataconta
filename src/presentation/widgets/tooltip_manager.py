"""
Manager de tooltips educativos para el dashboard.

Esta clase centraliza la configuraci√≥n de tooltips con contenido
educativo y de ayuda para mejorar la comprensi√≥n del usuario.

Principios SOLID aplicados:
- SRP: Solo maneja tooltips
- OCP: Extensible para nuevos tipos de ayuda
- DIP: No depende de widgets espec√≠ficos
"""

from PySide6.QtCore import Qt


class TooltipManager:
    """
    Manager centralizado para tooltips educativos del dashboard.
    
    Responsabilidad: Proveer contenido educativo mediante tooltips.
    """
    
    @staticmethod
    def get_chart_tooltip(chart_type: str) -> str:
        """
        Obtener tooltip educativo para un tipo de gr√°fico espec√≠fico.
        
        Args:
            chart_type: Tipo de gr√°fico ('sales_invoices', 'top_clients', etc.)
            
        Returns:
            str: Texto del tooltip con informaci√≥n educativa
        """
        tooltips = {
            'sales_invoices': (
                "üìä VENTAS vs FACTURAS\n\n"
                "‚Ä¢ Volumen de negocio: Total de ingresos\n"
                "‚Ä¢ Actividad comercial: N√∫mero de transacciones\n"
                "‚Ä¢ Balance saludable: Alta facturaci√≥n con ventas proporcionales\n\n"
                "üí° Tip: Un negocio eficiente maximiza ventas minimizando facturas"
            ),
            
            'top_clients': (
                "üë• TOP 10 CLIENTES\n\n"
                "‚Ä¢ Identifica tus clientes VIP m√°s valiosos\n"
                "‚Ä¢ Analiza la concentraci√≥n de ingresos\n"
                "‚Ä¢ Prioriza atenci√≥n comercial estrat√©gica\n\n"
                "üí° Regla 80/20: Pocos clientes generan la mayor√≠a de ingresos"
            ),
            
            'sales_distribution': (
                "ü•ß CONCENTRACI√ìN DE VENTAS\n\n"
                "‚Ä¢ Visualiza dependencia de clientes clave\n"
                "‚Ä¢ Eval√∫a riesgo de concentraci√≥n excesiva\n"
                "‚Ä¢ Identifica oportunidades de diversificaci√≥n\n\n"
                "‚ö†Ô∏è Alerta: >50% en pocos clientes = alto riesgo"
            ),
            
            'avg_ticket': (
                "üéØ MAYOR TICKET PROMEDIO\n\n"
                "‚Ä¢ Clientes con compras de alto valor unitario\n"
                "‚Ä¢ Oportunidades de upselling y cross-selling\n"
                "‚Ä¢ Segmento premium para estrategias especiales\n\n"
                "üí∞ Estrategia: Replica el √©xito con otros clientes"
            ),
            
            'bubble_chart': (
                "üíπ AN√ÅLISIS MULTIDIMENSIONAL\n\n"
                "‚Ä¢ Eje X: Frecuencia de compra (facturas)\n"
                "‚Ä¢ Eje Y: Volumen de ventas totales\n"
                "‚Ä¢ Tama√±o burbuja: Ticket promedio\n\n"
                "üìà Identifica: Clientes frecuentes vs espor√°dicos de alto valor"
            ),
            
            'pareto': (
                "üìà AN√ÅLISIS PARETO\n\n"
                "‚Ä¢ Principio 80/20 aplicado a ventas\n"
                "‚Ä¢ Identifica el 20% de clientes que generan 80% ingresos\n"
                "‚Ä¢ L√≠nea verde marca el punto cr√≠tico del 80%\n\n"
                "üéØ Enfoque: Maximiza atenci√≥n a clientes clave"
            )
        }
        
        return tooltips.get(chart_type, "Informaci√≥n no disponible")
    
    @staticmethod
    def get_kpi_tooltip(kpi_type: str) -> str:
        """
        Obtener tooltip educativo para un KPI espec√≠fico.
        
        Args:
            kpi_type: Tipo de KPI ('total_sales', 'avg_ticket', etc.)
            
        Returns:
            str: Texto del tooltip con informaci√≥n educativa
        """
        tooltips = {
            'total_sales': (
                "üí∞ VENTAS TOTALES\n\n"
                "Suma de todas las facturas procesadas\n"
                "‚Ä¢ Indicador de volumen de negocio\n"
                "‚Ä¢ Base para an√°lisis de crecimiento\n"
                "‚Ä¢ Comparar con per√≠odos anteriores"
            ),
            
            'total_invoices': (
                "üìÑ N√öMERO DE FACTURAS\n\n"
                "Total de transacciones registradas\n"
                "‚Ä¢ Indica actividad comercial\n"
                "‚Ä¢ Frecuencia de ventas\n"
                "‚Ä¢ Base para calcular ticket promedio"
            ),
            
            'avg_ticket': (
                "üéØ TICKET PROMEDIO\n\n"
                "Ventas totales √∑ N√∫mero de facturas\n"
                "‚Ä¢ Valor promedio por transacci√≥n\n"
                "‚Ä¢ Indicador de estrategia de precios\n"
                "‚Ä¢ Meta: Incrementar sin perder volumen"
            ),
            
            'top_client': (
                "üèÜ CLIENTE PRINCIPAL\n\n"
                "Cliente con mayores ventas totales\n"
                "‚Ä¢ Tu cliente m√°s valioso\n"
                "‚Ä¢ Requiere atenci√≥n estrat√©gica\n"
                "‚Ä¢ Modelo para replicar √©xito"
            ),
            
            'unique_clients': (
                "üë• CLIENTES √öNICOS\n\n"
                "N√∫mero total de clientes diferentes\n"
                "‚Ä¢ Base de clientes activa\n"
                "‚Ä¢ Diversificaci√≥n de riesgo\n"
                "‚Ä¢ Potencial de crecimiento"
            )
        }
        
        return tooltips.get(kpi_type, "Informaci√≥n no disponible")
    
    @staticmethod
    def get_tab_tooltip(tab_name: str) -> str:
        """
        Obtener tooltip para las pesta√±as del dashboard.
        
        Args:
            tab_name: Nombre de la pesta√±a ('dashboard', 'analytics')
            
        Returns:
            str: Texto del tooltip
        """
        tooltips = {
            'dashboard': (
                "üìä DASHBOARD PRINCIPAL\n\n"
                "Vista general de m√©tricas clave:\n"
                "‚Ä¢ KPIs principales del negocio\n"
                "‚Ä¢ Resumen ejecutivo de ventas\n"
                "‚Ä¢ Indicadores de rendimiento"
            ),
            
            'analytics': (
                "üìà AN√ÅLISIS DETALLADO\n\n"
                "Visualizaciones avanzadas:\n"
                "‚Ä¢ Gr√°ficos interactivos de ventas\n"
                "‚Ä¢ An√°lisis de clientes y comportamiento\n"
                "‚Ä¢ Insights para toma de decisiones"
            )
        }
        
        return tooltips.get(tab_name, "Informaci√≥n no disponible")
    
    @staticmethod
    def apply_chart_tooltips(canvas_widget, chart_type: str):
        """
        Aplicar tooltip a un widget canvas de matplotlib.
        
        Args:
            canvas_widget: Widget de matplotlib canvas
            chart_type: Tipo de gr√°fico para el tooltip apropiado
        """
        if canvas_widget:
            tooltip_text = TooltipManager.get_chart_tooltip(chart_type)
            canvas_widget.setToolTip(tooltip_text)
            canvas_widget.setToolTipDuration(10000)  # 10 segundos
    
    @staticmethod
    def apply_kpi_tooltips(label_widget, kpi_type: str):
        """
        Aplicar tooltip a un widget label de KPI.
        
        Args:
            label_widget: Widget QLabel del KPI
            kpi_type: Tipo de KPI para el tooltip apropiado
        """
        if label_widget:
            tooltip_text = TooltipManager.get_kpi_tooltip(kpi_type)
            label_widget.setToolTip(tooltip_text)
            label_widget.setToolTipDuration(8000)  # 8 segundos
    
    @staticmethod
    def apply_tab_tooltips(tab_widget, tab_index: int, tab_name: str):
        """
        Aplicar tooltip a una pesta√±a del QTabWidget.
        
        Args:
            tab_widget: QTabWidget
            tab_index: √çndice de la pesta√±a
            tab_name: Nombre de la pesta√±a para el tooltip apropiado
        """
        if tab_widget:
            tooltip_text = TooltipManager.get_tab_tooltip(tab_name)
            tab_widget.setTabToolTip(tab_index, tooltip_text)