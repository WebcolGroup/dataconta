#!/usr/bin/env python3
"""
DATACONTA - Sistema Avanzado de Men√∫s con Funcionalidad Completa
Sistema de men√∫s modular con integraci√≥n completa de la API de Siigo
"""

import sys
import os
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.presentation.menu_system import MenuSystem, MenuSession, MenuOption, LicenseType, LicenseValidator
from src.infrastructure.adapters.logger_adapter import LoggerAdapter
from src.infrastructure.adapters.siigo_api_adapter import SiigoAPIAdapter
from src.infrastructure.adapters.license_validator_adapter import LicenseValidatorAdapter
from src.infrastructure.adapters.file_storage_adapter import FileStorageAdapter
from src.infrastructure.adapters.csv_file_adapter import CSVFileAdapter
from src.infrastructure.config.environment_config import EnvironmentConfigurationProvider
from src.presentation.cli_interface import CLIUserInterfaceAdapter

from src.application.services.InvoiceExportService import InvoiceExportService
from src.application.services.BIExportService import BIExportService
from src.application.use_cases.invoice_use_cases import (
    GetInvoicesUseCase,
    CheckAPIStatusUseCase,
    ViewStoredFilesUseCase,
    ExportInvoiceToCSVUseCase,
    ExportInvoicesFromAPIToCSVUseCase,
    ExportToBIUseCase,
    GetInvoicesRequest,
    ExportInvoiceToCSVRequest,
    ExportInvoicesFromAPIToCSVRequest,
    ExportToBIRequest
)


class DataContaAdvancedApp:
    """Application principal con sistema de men√∫s avanzado y funcionalidad completa"""
    
    def __init__(self):
        """Initialize application"""
        self._logger = LoggerAdapter(__name__)
        self._setup_infrastructure()
        self._setup_use_cases()
        self._setup_menu_system()
    
    def _setup_infrastructure(self):
        """Set up infrastructure components"""
        try:
            # Core infrastructure
            self._config = EnvironmentConfigurationProvider(self._logger)
            
            # Validate configuration
            is_valid, missing_vars = self._config.validate_configuration()
            if not is_valid:
                self._logger.error(f"Configuration validation failed. Missing: {missing_vars}")
                raise Exception("Configuration validation failed")
            
            # External adapters
            self._siigo_adapter = SiigoAPIAdapter(self._logger)
            self._license_validator = LicenseValidatorAdapter(
                self._config.get_license_url(),
                self._logger
            )
            self._file_storage = FileStorageAdapter(
                self._config.get_output_directory(),
                self._logger
            )
            self._csv_exporter = CSVFileAdapter(self._logger)
            self._ui = CLIUserInterfaceAdapter(self._logger)
            
            # Application services
            self._invoice_export_service = InvoiceExportService(self._logger)
            self._bi_export_service = BIExportService(self._logger)
            
            # Authenticate with Siigo API
            credentials = self._config.get_api_credentials()
            if not self._siigo_adapter.authenticate(credentials):
                self._logger.error("Failed to authenticate with Siigo API")
                raise Exception("API authentication failed")
            
            self._logger.info("Infrastructure setup completed successfully")
            
        except Exception as e:
            self._logger.error(f"Infrastructure setup failed: {e}")
            raise
    
    def _setup_use_cases(self):
        """Set up use cases"""
        self._get_invoices_use_case = GetInvoicesUseCase(
            self._siigo_adapter,
            self._license_validator,
            self._file_storage,
            self._logger
        )
        
        self._check_api_status_use_case = CheckAPIStatusUseCase(
            self._siigo_adapter,
            self._license_validator,
            self._logger
        )
        
        self._view_files_use_case = ViewStoredFilesUseCase(
            self._file_storage,
            self._logger
        )
        
        self._export_csv_use_case = ExportInvoiceToCSVUseCase(
            self._invoice_export_service,
            self._csv_exporter,
            self._license_validator,
            self._logger
        )
        
        self._export_api_to_csv_use_case = ExportInvoicesFromAPIToCSVUseCase(
            self._siigo_adapter,
            self._invoice_export_service,
            self._csv_exporter,
            self._license_validator,
            self._logger
        )
        
        self._export_to_bi_use_case = ExportToBIUseCase(
            self._siigo_adapter,
            self._bi_export_service,
            self._license_validator,
            self._logger
        )
    
    def _setup_menu_system(self):
        """Set up the advanced menu system"""
        # Create menu system
        self._menu_system = MenuSystem()
        
        # Create license validator for menu system
        menu_license_validator = LicenseValidator()
        menu_license_validator.license_validator_adapter = self._license_validator
        menu_license_validator.license_key = self._config.get_license_key()
        
        self._menu_system.license_validator = menu_license_validator
        
        # Configure menu sessions
        self._configure_business_intelligence_session()
        self._configure_reports_session()
        self._configure_tools_session()
        self._configure_ollama_session()
        self._configure_ai_analytics_session()
    
    def _configure_business_intelligence_session(self):
        """Configure Business Intelligence session"""
        bi_session = MenuSession(
            title="Business Intelligence",
            emoji="üìä",
            license_required=LicenseType.FREE,
            description="Herramientas de an√°lisis de datos y consultas",
            options=[
                MenuOption(
                    name="Consultar Facturas de Venta",
                    emoji="üìã",
                    action=self._handle_get_invoices,
                    description="Consultar y visualizar facturas de venta"
                ),
                MenuOption(
                    name="Exportar a Business Intelligence",
                    emoji="üè¢",
                    action=self._handle_export_bi,
                    description="Generar modelo estrella para Power BI"
                )
            ]
        )
        self._menu_system.register_session("business_intelligence", bi_session)
    
    def _configure_reports_session(self):
        """Configure Reports session"""
        reports_session = MenuSession(
            title="Generaci√≥n de Informes",
            emoji="üìà",
            license_required=LicenseType.PRO,
            description="Sistema completo de informes empresariales",
            options=[
                MenuOption(
                    name="üìä Informes Financieros",
                    emoji="üí∞",
                    action=self._handle_financial_reports_menu,
                    description="Estado de Resultados, Balance General, Flujo de Caja"
                ),
                MenuOption(
                    name="‚öôÔ∏è Informes Operativos",
                    emoji="üè≠",
                    action=self._handle_operational_reports_menu,
                    description="Reportes de operaciones y procesos del negocio"
                ),
                MenuOption(
                    name="üìã Informes de Cumplimiento y Auditor√≠a",
                    emoji="ÔøΩ",
                    action=self._handle_compliance_reports_menu,
                    description="Reportes regulatorios y de auditor√≠a"
                ),
                MenuOption(
                    name="üëî Informes Gerenciales",
                    emoji="üìä",
                    action=self._handle_management_reports_menu,
                    description="Dashboards ejecutivos y reportes estrat√©gicos"
                ),
                MenuOption(
                    name="üìÅ Ver Archivos de Salida",
                    emoji="ÔøΩ",
                    action=self._handle_view_files,
                    description="Explorar archivos generados por el sistema"
                ),
                MenuOption(
                    name="üì§ Exportar Facturas a CSV",
                    emoji="ÔøΩ",
                    action=self._handle_export_csv,
                    description="Exportar facturas directamente desde la API a CSV"
                )
            ]
        )
        self._menu_system.register_session("reports", reports_session)
    
    def _configure_tools_session(self):
        """Configure Tools session"""
        tools_session = MenuSession(
            title="Herramientas",
            emoji="üõ†Ô∏è",
            license_required=LicenseType.FREE,
            description="Utilidades y herramientas de sistema",
            options=[
                MenuOption(
                    name="Verificar Estado de la API",
                    emoji="üîç",
                    action=self._handle_check_api_status,
                    description="Verificar conectividad y estado de Siigo API"
                ),
                MenuOption(
                    name="Configuraci√≥n del Sistema",
                    emoji="‚öôÔ∏è",
                    action=self._handle_show_configuration,
                    description="Ver y gestionar configuraci√≥n del sistema"
                )
            ]
        )
        self._menu_system.register_session("tools", tools_session)
    
    def _configure_ollama_session(self):
        """Configure Ollama session"""
        ollama_session = MenuSession(
            title="Integraci√≥n con Ollama",
            emoji="ü§ñ",
            license_required=LicenseType.PRO,
            description="Integraci√≥n con modelos de IA local",
            options=[
                MenuOption(
                    name="Enviar Datos a Ollama",
                    emoji="üì§",
                    action=self._handle_send_to_ollama,
                    description="Enviar datos de facturas para an√°lisis con IA"
                ),
                MenuOption(
                    name="Consultar Respuesta de Ollama",
                    emoji="üí¨",
                    action=self._handle_query_ollama,
                    description="Ver respuestas y an√°lisis de Ollama"
                )
            ]
        )
        self._menu_system.register_session("ollama", ollama_session)
    
    def _configure_ai_analytics_session(self):
        """Configure AI Analytics session (Enterprise)"""
        ai_analytics_session = MenuSession(
            title="An√°lisis con IA",
            emoji="üß†",
            license_required=LicenseType.ENTERPRISE,
            description="An√°lisis avanzado con inteligencia artificial",
            options=[
                MenuOption(
                    name="An√°lisis Predictivo",
                    emoji="üîÆ",
                    action=self._handle_predictive_analysis,
                    description="Predicciones basadas en datos hist√≥ricos"
                ),
                MenuOption(
                    name="Detecci√≥n de Anomal√≠as",
                    emoji="üéØ",
                    action=self._handle_anomaly_detection,
                    description="Identificar patrones inusuales en facturas"
                ),
                MenuOption(
                    name="Recomendaciones Inteligentes",
                    emoji="üí°",
                    action=self._handle_smart_recommendations,
                    description="Sugerencias automatizadas para optimizaci√≥n"
                )
            ]
        )
        self._menu_system.register_session("ai_analytics", ai_analytics_session)
    
    # Handler methods - Real implementations
    
    def _handle_get_invoices(self):
        """Handle get invoices operation"""
        try:
            print("üìã Consultando facturas de venta...")
            print("üìÖ Usando filtros predeterminados (√∫ltimas 50 facturas)")
            
            request = GetInvoicesRequest(
                document_id=None,
                created_start=None,
                created_end=None
            )
            
            response = self._get_invoices_use_case.execute(
                request,
                self._config.get_license_key()
            )
            
            if response.success:
                print(f"‚úÖ {response.message}")
                
                if response.invoices:
                    print(f"üìä Total de facturas encontradas: {len(response.invoices)}")
                    print("\nüìã Primeras 10 facturas:")
                    
                    for i, invoice in enumerate(response.invoices[:10], 1):
                        number = invoice.get('number', invoice.get('id', 'N/A'))
                        date = invoice.get('date', 'N/A')
                        total = invoice.get('total', 0)
                        print(f"  {i}. {number} - {date} - ${total:,.2f}")
                    
                    if len(response.invoices) > 10:
                        print(f"  ... y {len(response.invoices) - 10} facturas m√°s")
                    
                    print("\nüíæ Los datos se han guardado en la carpeta 'outputs/'")
                else:
                    print("‚ÑπÔ∏è No se encontraron facturas con los filtros aplicados")
            else:
                print(f"‚ùå {response.message}")
            
            return True
            
        except Exception as e:
            self._logger.error(f"Error in get invoices handler: {e}")
            print(f"‚ùå Error al consultar facturas: {e}")
            return False
    
    def _handle_export_bi(self):
        """Handle export to Business Intelligence"""
        try:
            print("üè¢ Exportar a Business Intelligence")
            print("-" * 40)
            print("üìä Generar modelo estrella para Power BI")
            print("Se crear√°n m√∫ltiples CSVs normalizados en outputs/bi/")
            
            print("\nüìÖ Usando par√°metros predeterminados:")
            print("   üìÖ Fechas: Sin l√≠mite")
            print("   üìä M√°ximo registros: 10")
            print("   ‚úÖ Validar esquema: No")
            
            request = ExportToBIRequest(
                start_date=None,
                end_date=None,
                max_records=10,  # Reduced even more for testing
                validate_schema=False
            )
            
            print("\n‚ÑπÔ∏è üîÑ Procesando facturas y generando modelo estrella...")
            
            license_key = self._config.get_license_key()
            result = self._export_to_bi_use_case.execute(request, license_key)
            
            if result.success:
                stats = result.statistics
                files = result.files_created
                
                success_files = [filename for filename, success in files.items() if success]
                
                print("‚úÖ Exportaci√≥n BI exitosa!")
                print(f"üìä Facturas procesadas: {stats.get('facts_count', 0)}")
                print(f"üë• Clientes √∫nicos: {stats.get('clients_count', 0)}")
                print(f"üè™ Vendedores √∫nicos: {stats.get('sellers_count', 0)}")
                print(f"üì¶ Productos √∫nicos: {stats.get('products_count', 0)}")
                print(f"üí≥ M√©todos de pago √∫nicos: {stats.get('payments_count', 0)}")
                print(f"üìÖ Fechas √∫nicas: {stats.get('dates_count', 0)}")
                print("\nüìÅ Archivos creados:")
                
                for filename in success_files:
                    print(f"   ‚úì {filename}")
                
                print(f"\nüìÇ Ubicaci√≥n: {stats.get('output_directory', 'outputs/bi/')}")
                print(f"üí¨ {result.message}")
                
            else:
                print(f"‚ùå Error en exportaci√≥n BI: {result.message}")
                
                if result.files_created:
                    failed_files = [f for f, s in result.files_created.items() if not s]
                    if failed_files:
                        print(f"‚ùå Archivos que fallaron: {', '.join(failed_files)}")
            
            return result.success
            
        except Exception as e:
            self._logger.error(f"Error in export BI handler: {e}")
            print(f"‚ùå Error al exportar BI: {e}")
            return False
    
    def _handle_check_api_status(self):
        """Handle check API status"""
        try:
            print("üîç Verificando estado de la API...")
            
            status = self._check_api_status_use_case.execute(
                self._config.get_license_key()
            )
            
            if status.get('success', False):
                print("‚úÖ Estado de la API: Operativa")
                print(f"üåê URL: {status.get('api_url', 'N/A')}")
                print(f"üë§ Usuario: {status.get('username', 'N/A')}")
                print(f"‚è∞ Tiempo de respuesta: {status.get('response_time_ms', 0)}ms")
                
                if 'endpoints_status' in status:
                    print("\nüì° Estado de endpoints:")
                    for endpoint, endpoint_status in status['endpoints_status'].items():
                        status_icon = "‚úÖ" if endpoint_status else "‚ùå"
                        print(f"   {status_icon} {endpoint}")
            else:
                print("‚ùå Estado de la API: Error")
                print(f"üí¨ Mensaje: {status.get('message', 'Error desconocido')}")
            
            return True
            
        except Exception as e:
            self._logger.error(f"Error in check API status handler: {e}")
            print(f"‚ùå Error al verificar el estado de la API: {e}")
            return False
    
    def _handle_view_files(self):
        """Handle view files"""
        try:
            print("üìÅ Ver Archivos de Salida")
            print("-" * 40)
            
            result = self._view_files_use_case.execute()
            
            if result['success']:
                files = result['files']
                if files:
                    print(f"üìä Total de archivos encontrados: {len(files)}")
                    print("\nüìã Lista de archivos:")
                    
                    for file_info in files:
                        file_type = file_info.get('type', 'UNKNOWN').upper()
                        file_name = file_info.get('name', 'N/A')
                        file_size = file_info.get('size', 0)
                        
                        size_mb = file_size / (1024 * 1024) if file_size > 0 else 0
                        
                        print(f"  üìÑ [{file_type}] {file_name} ({size_mb:.2f} MB)")
                    
                    print(f"\nüí¨ {result['message']}")
                else:
                    print("‚ÑπÔ∏è No se encontraron archivos de salida")
            else:
                print(f"‚ùå {result['message']}")
            
            return True
            
        except Exception as e:
            self._logger.error(f"Error in view files handler: {e}")
            print(f"‚ùå Error al ver los archivos: {e}")
            return False
    
    def _handle_export_csv(self):
        """Handle export CSV"""
        try:
            print("üì§ Exportar Facturas a CSV")
            print("-" * 40)
            print("üìä Exportar facturas desde API a formato CSV")
            
            print("\nüìã Usando par√°metros predeterminados:")
            print("   üìÖ Fechas: Sin l√≠mite")
            print("   üìä M√°ximo registros: 25")
            
            request = ExportInvoicesFromAPIToCSVRequest(
                start_date=None,
                end_date=None,
                max_records=25,  # Reduced for better performance
                output_filename=None
            )
            
            print("\n‚ÑπÔ∏è üîÑ Obteniendo facturas desde API y exportando a CSV...")
            
            license_key = self._config.get_license_key()
            result = self._export_api_to_csv_use_case.execute(request, license_key)
            
            if result.success:
                outputs_path = self._csv_exporter.get_outputs_directory()
                print("‚úÖ Exportaci√≥n exitosa!")
                print(f"üìÅ Archivo: {result.file_path}")
                print(f"üìä Filas exportadas: {result.rows_exported}")
                print(f"üìÇ Ubicaci√≥n: {outputs_path}")
                print(f"üí¨ {result.message}")
            else:
                print(f"‚ùå Error en exportaci√≥n: {result.message}")
            
            return result.success
            
        except Exception as e:
            self._logger.error(f"Error in export CSV handler: {e}")
            print(f"‚ùå Error al exportar CSV: {e}")
            return False
    
    # Report menu handlers - New structured approach
    
    def _handle_financial_reports_menu(self):
        """Handle Financial Reports submenu"""
        try:
            while True:
                print("\n" + "="*60)
                print("üí∞ INFORMES FINANCIEROS")
                print("="*60)
                print("üìù Reportes contables y an√°lisis financiero")
                print("-"*60)
                print("1. üìä Estado de Resultados (P&L)")
                print("   üìù Informe de ingresos, gastos y utilidades")
                print("2. ‚öñÔ∏è Balance General")
                print("   üìù Activos, pasivos y patrimonio")
                print("3. üí∏ Flujo de Caja")
                print("   üìù An√°lisis de entradas y salidas de efectivo")
                print("4. üè¶ Cuentas por Cobrar y Pagar")
                print("   üìù Estado de deudas y acreencias")
                print("-"*60)
                print("9. üîô Volver al men√∫ anterior")
                print("0. üö™ Salir")
                print("="*60)
                
                try:
                    option = input("\nSeleccione una opci√≥n: ").strip()
                    
                    if option == "0":
                        return False
                    elif option == "9":
                        return True
                    elif option == "1":
                        self._handle_profit_loss_report()
                    elif option == "2":
                        self._handle_balance_sheet_report()
                    elif option == "3":
                        self._handle_cash_flow_report()
                    elif option == "4":
                        self._handle_accounts_report()
                    else:
                        print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                    
                    if option in ["1", "2", "3", "4"]:
                        input("\nÔøΩ Presione Enter para continuar...")
                    
                except KeyboardInterrupt:
                    return False
                    
        except Exception as e:
            self._logger.error(f"Error in financial reports menu: {e}")
            print(f"‚ùå Error en el men√∫ de informes financieros: {e}")
            return False
    
    def _handle_operational_reports_menu(self):
        """Handle Operational Reports submenu"""
        try:
            while True:
                print("\n" + "="*60)
                print("üè≠ INFORMES OPERATIVOS")
                print("="*60)
                print("üìù Reportes de operaciones y procesos del negocio")
                print("-"*60)
                print("1. üì¶ Informe de Ventas")
                print("   üìù An√°lisis detallado de ventas y productos")
                print("2. üë• Informe de Clientes")
                print("   üìù Comportamiento y segmentaci√≥n de clientes")
                print("3. üè™ Informe de Vendedores")
                print("   üìù Desempe√±o del equipo de ventas")
                print("4. üìà An√°lisis de Tendencias")
                print("   üìù Patrones y tendencias del negocio")
                print("-"*60)
                print("9. üîô Volver al men√∫ anterior")
                print("0. ÔøΩ Salir")
                print("="*60)
                
                try:
                    option = input("\nSeleccione una opci√≥n: ").strip()
                    
                    if option == "0":
                        return False
                    elif option == "9":
                        return True
                    elif option == "1":
                        self._handle_sales_report()
                    elif option == "2":
                        self._handle_customers_report()
                    elif option == "3":
                        self._handle_sellers_report()
                    elif option == "4":
                        self._handle_trends_report()
                    else:
                        print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                    
                    if option in ["1", "2", "3", "4"]:
                        input("\nüìå Presione Enter para continuar...")
                    
                except KeyboardInterrupt:
                    return False
                    
        except Exception as e:
            self._logger.error(f"Error in operational reports menu: {e}")
            print(f"‚ùå Error en el men√∫ de informes operativos: {e}")
            return False
    
    def _handle_compliance_reports_menu(self):
        """Handle Compliance Reports submenu"""
        try:
            while True:
                print("\n" + "="*60)
                print("üîç INFORMES DE CUMPLIMIENTO Y AUDITOR√çA")
                print("="*60)
                print("üìù Reportes regulatorios y de auditor√≠a")
                print("-"*60)
                print("1. üìã Reporte DIAN")
                print("   üìù Informes para la Direcci√≥n de Impuestos")
                print("2. üßæ Libro de Ventas")
                print("   üìù Registro oficial de ventas")
                print("3. üîê Auditor√≠a de Facturas")
                print("   üìù Revisi√≥n y validaci√≥n de documentos")
                print("4. üìä Informe de Impuestos")
                print("   üìù C√°lculos y declaraciones tributarias")
                print("-"*60)
                print("9. üîô Volver al men√∫ anterior")
                print("0. üö™ Salir")
                print("="*60)
                
                try:
                    option = input("\nSeleccione una opci√≥n: ").strip()
                    
                    if option == "0":
                        return False
                    elif option == "9":
                        return True
                    elif option == "1":
                        self._handle_dian_report()
                    elif option == "2":
                        self._handle_sales_book_report()
                    elif option == "3":
                        self._handle_audit_report()
                    elif option == "4":
                        self._handle_tax_report()
                    else:
                        print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                    
                    if option in ["1", "2", "3", "4"]:
                        input("\nüìå Presione Enter para continuar...")
                    
                except KeyboardInterrupt:
                    return False
                    
        except Exception as e:
            self._logger.error(f"Error in compliance reports menu: {e}")
            print(f"‚ùå Error en el men√∫ de cumplimiento: {e}")
            return False
    
    def _handle_management_reports_menu(self):
        """Handle Management Reports submenu"""
        try:
            while True:
                print("\n" + "="*60)
                print("ÔøΩ INFORMES GERENCIALES")
                print("="*60)
                print("üìù Dashboards ejecutivos y reportes estrat√©gicos")
                print("-"*60)
                print("1. üìä Dashboard Ejecutivo")
                print("   üìù KPIs y m√©tricas clave del negocio")
                print("2. üíπ An√°lisis de Rentabilidad")
                print("   üìù M√°rgenes y rentabilidad por producto/cliente")
                print("3. üéØ Indicadores de Desempe√±o")
                print("   üìù KPIs operativos y financieros")
                print("4. üìà Proyecciones y Presupuestos")
                print("   üìù An√°lisis predictivo y planeaci√≥n")
                print("-"*60)
                print("9. üîô Volver al men√∫ anterior")
                print("0. üö™ Salir")
                print("="*60)
                
                try:
                    option = input("\nSeleccione una opci√≥n: ").strip()
                    
                    if option == "0":
                        return False
                    elif option == "9":
                        return True
                    elif option == "1":
                        self._handle_executive_dashboard()
                    elif option == "2":
                        self._handle_profitability_analysis()
                    elif option == "3":
                        self._handle_kpi_report()
                    elif option == "4":
                        self._handle_projections_report()
                    else:
                        print("‚ùå Opci√≥n no v√°lida. Intente nuevamente.")
                    
                    if option in ["1", "2", "3", "4"]:
                        input("\nüìå Presione Enter para continuar...")
                    
                except KeyboardInterrupt:
                    return False
                    
        except Exception as e:
            self._logger.error(f"Error in management reports menu: {e}")
            print(f"‚ùå Error en el men√∫ de informes gerenciales: {e}")
            return False
    
    # Financial Reports Implementation
    
    def _handle_profit_loss_report(self):
        """Handle Profit & Loss Statement"""
        print("üìä Estado de Resultados (P&L)")
        print("-" * 40)
        print("üí∞ Generando informe de ingresos, gastos y utilidades...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Mes actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Ingresos por ventas")
        print("  ‚Ä¢ Costos y gastos operativos")
        print("  ‚Ä¢ Utilidad bruta y neta")
        print("  ‚Ä¢ Comparativo vs per√≠odo anterior")
        return True
    
    def _handle_balance_sheet_report(self):
        """Handle Balance Sheet"""
        print("‚öñÔ∏è Balance General")
        print("-" * 40)
        print("üèõÔ∏è Generando estado de situaci√≥n financiera...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Fecha de corte: Hoy")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Activos corrientes y no corrientes")
        print("  ‚Ä¢ Pasivos y obligaciones")
        print("  ‚Ä¢ Patrimonio y capital")
        print("  ‚Ä¢ Ecuaci√≥n contable balanceada")
        return True
    
    def _handle_cash_flow_report(self):
        """Handle Cash Flow Statement"""
        print("üí∏ Flujo de Caja")
        print("-" * 40)
        print("üí∞ Analizando entradas y salidas de efectivo...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: √öltimos 3 meses")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Flujo operativo")
        print("  ‚Ä¢ Flujo de inversi√≥n")
        print("  ‚Ä¢ Flujo de financiaci√≥n")
        print("  ‚Ä¢ Proyecci√≥n de liquidez")
        return True
    
    def _handle_accounts_report(self):
        """Handle Accounts Receivable/Payable"""
        print("üè¶ Cuentas por Cobrar y Pagar")
        print("-" * 40)
        print("üí≥ Analizando estado de deudas y acreencias...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Corte: Fecha actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Antig√ºedad de saldos")
        print("  ‚Ä¢ Clientes morosos")
        print("  ‚Ä¢ Obligaciones por pagar")
        print("  ‚Ä¢ Indicadores de cartera")
        return True
    
    # Operational Reports Implementation
    
    def _handle_sales_report(self):
        """Handle Sales Report"""
        print("üì¶ Informe de Ventas")
        print("-" * 40)
        print("üìä Analizando desempe√±o de ventas...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: √öltimo mes")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Ventas por producto")
        print("  ‚Ä¢ An√°lisis de m√°rgenes")
        print("  ‚Ä¢ Productos m√°s vendidos")
        print("  ‚Ä¢ Tendencias de ventas")
        return True
    
    def _handle_customers_report(self):
        """Handle Customers Report"""
        print("üë• Informe de Clientes")
        print("-" * 40)
        print("üë§ Analizando comportamiento de clientes...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: √öltimos 6 meses")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Segmentaci√≥n de clientes")
        print("  ‚Ä¢ Frecuencia de compras")
        print("  ‚Ä¢ Valor promedio de compra")
        print("  ‚Ä¢ Clientes m√°s rentables")
        return True
    
    def _handle_sellers_report(self):
        """Handle Sellers Performance Report"""
        print("üè™ Informe de Vendedores")
        print("-" * 40)
        print("ÔøΩ Evaluando desempe√±o del equipo de ventas...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Trimestre actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Ventas por vendedor")
        print("  ‚Ä¢ Cumplimiento de metas")
        print("  ‚Ä¢ Comisiones generadas")
        print("  ‚Ä¢ Ranking de desempe√±o")
        return True
    
    def _handle_trends_report(self):
        """Handle Trends Analysis Report"""
        print("üìà An√°lisis de Tendencias")
        print("-" * 40)
        print("üìä Identificando patrones del negocio...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: √öltimo a√±o")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Estacionalidad de ventas")
        print("  ‚Ä¢ Crecimiento mensual")
        print("  ‚Ä¢ Tendencias por categor√≠a")
        print("  ‚Ä¢ Predicciones futuras")
        return True
    
    # Compliance Reports Implementation
    
    def _handle_dian_report(self):
        """Handle DIAN Report"""
        print("üìã Reporte DIAN")
        print("-" * 40)
        print("üèõÔ∏è Generando informes para la DIAN...")
        print("ÔøΩ Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Mes fiscal actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Formato 1001 - Ventas")
        print("  ‚Ä¢ Retenciones aplicadas")
        print("  ‚Ä¢ IVA causado y descontable")
        print("  ‚Ä¢ Archivos XML para env√≠o")
        return True
    
    def _handle_sales_book_report(self):
        """Handle Sales Book Report"""
        print("üßæ Libro de Ventas")
        print("-" * 40)
        print("üìö Generando libro oficial de ventas...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Mes seleccionado")
        print("ÔøΩ Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Registro cronol√≥gico")
        print("  ‚Ä¢ Numeraci√≥n consecutiva")
        print("  ‚Ä¢ Totales por d√≠a/mes")
        print("  ‚Ä¢ Formato legal requerido")
        return True
    
    def _handle_audit_report(self):
        """Handle Audit Report"""
        print("üîê Auditor√≠a de Facturas")
        print("-" * 40)
        print("üîç Verificando integridad de documentos...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Rango seleccionado")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Validaci√≥n de secuencias")
        print("  ‚Ä¢ Facturas anuladas")
        print("  ‚Ä¢ Inconsistencias detectadas")
        print("  ‚Ä¢ Reporte de anomal√≠as")
        return True
    
    def _handle_tax_report(self):
        """Handle Tax Report"""
        print("üìä Informe de Impuestos")
        print("-" * 40)
        print("üí∞ Calculando obligaciones tributarias...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Bimestre actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ IVA por pagar")
        print("  ‚Ä¢ Retenciones practicadas")
        print("  ‚Ä¢ Base gravable")
        print("  ‚Ä¢ Formularios de declaraci√≥n")
        return True
    
    # Management Reports Implementation
    
    def _handle_executive_dashboard(self):
        """Handle Executive Dashboard"""
        print("üìä Dashboard Ejecutivo")
        print("-" * 40)
        print("üìà Generando vista ejecutiva del negocio...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Tiempo real y tendencias")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ KPIs principales")
        print("  ‚Ä¢ Gr√°ficos de tendencias")
        print("  ‚Ä¢ Alertas importantes")
        print("  ‚Ä¢ Resumen ejecutivo")
        return True
    
    def _handle_profitability_analysis(self):
        """Handle Profitability Analysis"""
        print("üíπ An√°lisis de Rentabilidad")
        print("-" * 40)
        print("üí∞ Evaluando rentabilidad por segmentos...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: √öltimos 12 meses")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Margen por producto")
        print("  ‚Ä¢ Rentabilidad por cliente")
        print("  ‚Ä¢ An√°lisis ABC")
        print("  ‚Ä¢ Oportunidades de mejora")
        return True
    
    def _handle_kpi_report(self):
        """Handle KPI Report"""
        print("üéØ Indicadores de Desempe√±o")
        print("-" * 40)
        print("üìä Midiendo indicadores clave...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Per√≠odo: Trimestre actual")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ ROI y ROE")
        print("  ‚Ä¢ Rotaci√≥n de inventario")
        print("  ‚Ä¢ D√≠as de cartera")
        print("  ‚Ä¢ Indicadores operativos")
        return True
    
    def _handle_projections_report(self):
        """Handle Projections and Budget Report"""
        print("üìà Proyecciones y Presupuestos")
        print("-" * 40)
        print("üîÆ Generando an√°lisis predictivo...")
        print("üîß Funcionalidad en desarrollo...")
        print("üìÖ Horizonte: Pr√≥ximos 6 meses")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Proyecci√≥n de ventas")
        print("  ‚Ä¢ Presupuesto vs real")
        print("  ‚Ä¢ An√°lisis de variaciones")
        print("  ‚Ä¢ Escenarios futuros")
        return True
    
    # Ollama handlers (future functionality)
    def _handle_send_to_ollama(self):
        """Handle send to Ollama"""
        print("ü§ñ Enviar Datos a Ollama")
        print("-" * 40)
        print("üîß Funcionalidad en desarrollo...")
        print("‚ÑπÔ∏è La integraci√≥n con Ollama estar√° disponible pr√≥ximamente")
        print("üí° Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ An√°lisis autom√°tico de facturas")
        print("  ‚Ä¢ Detecci√≥n de patrones y tendencias")
        print("  ‚Ä¢ Recomendaciones inteligentes")
        return True
    
    def _handle_query_ollama(self):
        """Handle query Ollama"""
        print("üí¨ Consultar Respuesta de Ollama")
        print("-" * 40)
        print("üîß Funcionalidad en desarrollo...")
        print("‚ÑπÔ∏è La consulta a Ollama estar√° disponible pr√≥ximamente")
        print("üí° Podr√°s obtener:")
        print("  ‚Ä¢ An√°lisis de tendencias de ventas")
        print("  ‚Ä¢ Insights sobre clientes")
        print("  ‚Ä¢ Recomendaciones de optimizaci√≥n")
        return True
    
    # Enterprise AI handlers (future functionality)
    def _handle_predictive_analysis(self):
        """Handle predictive analysis"""
        print("üîÆ An√°lisis Predictivo")
        print("-" * 40)
        print("üîß Funcionalidad Enterprise en desarrollo...")
        print("‚ÑπÔ∏è Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Pron√≥stico de ventas")
        print("  ‚Ä¢ Tendencias de mercado")
        print("  ‚Ä¢ An√°lisis de temporalidad")
        return True
    
    def _handle_anomaly_detection(self):
        """Handle anomaly detection"""
        print("üéØ Detecci√≥n de Anomal√≠as")
        print("-" * 40)
        print("üîß Funcionalidad Enterprise en desarrollo...")
        print("‚ÑπÔ∏è Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Facturas duplicadas")
        print("  ‚Ä¢ Patrones de precios inusuales")
        print("  ‚Ä¢ Comportamiento at√≠pico de clientes")
        return True
    
    def _handle_smart_recommendations(self):
        """Handle smart recommendations"""
        print("üí° Recomendaciones Inteligentes")
        print("-" * 40)
        print("üîß Funcionalidad Enterprise en desarrollo...")
        print("‚ÑπÔ∏è Caracter√≠sticas planificadas:")
        print("  ‚Ä¢ Optimizaci√≥n de precios")
        print("  ‚Ä¢ Mejores clientes potenciales")
        print("  ‚Ä¢ Estrategias de ventas personalizadas")
        return True
    
    def _handle_show_configuration(self):
        """Handle show configuration"""
        try:
            print("‚öôÔ∏è Configuraci√≥n del Sistema")
            print("-" * 40)
            
            credentials = self._config.get_api_credentials()
            output_dir = self._config.get_output_directory()
            license_key = self._config.get_license_key()
            
            print("üìã Configuraci√≥n actual:")
            print(f"  üåê API URL: {credentials.api_url}")
            print(f"  üë§ Usuario: {credentials.username}")
            print(f"  üîë Clave de acceso: {credentials.access_key[:10]}...")
            print(f"  üìÇ Directorio de salida: {output_dir}")
            print(f"  üé´ Clave de licencia: {license_key[:15]}..." if license_key else "  üé´ Sin licencia configurada")
            print(f"  üìä Formato decimal: Coma (,) - Optimizado para Power BI")
            
            return True
            
        except Exception as e:
            self._logger.error(f"Error in show configuration handler: {e}")
            print(f"‚ùå Error al mostrar configuraci√≥n: {e}")
            return False
    
    def run(self):
        """Run the application"""
        try:
            print("üöÄ DATACONTA - SISTEMA AVANZADO DE MEN√öS")
            print("=" * 60)
            print("‚ú® Sistema modular con funcionalidad completa integrada")
            print("üîó Conectado a API de Siigo con todas las caracter√≠sticas")
            print("=" * 60)
            
            # Show license information
            license_display = self._menu_system.license_validator.get_license_display_name()
            print(f"‚úÖ Inicializaci√≥n exitosa - Licencia: {license_display}")
            print("üåê Conexi√≥n con API de Siigo: ‚úÖ Establecida")
            print()
            
            # Run menu system
            self._menu_system.run()
            
            print("üîö Finalizando aplicaci√≥n...")
            
        except KeyboardInterrupt:
            print("\nüëã ¬°Aplicaci√≥n terminada por el usuario!")
        except Exception as e:
            self._logger.error(f"Error running application: {e}")
            print(f"‚ùå Error durante la ejecuci√≥n: {e}")
            raise


def main():
    """Main entry point"""
    try:
        app = DataContaAdvancedApp()
        app.run()
        return 0
        
    except Exception as e:
        print(f"‚ùå Error cr√≠tico durante la inicializaci√≥n: {str(e)}")
        print("üí° Verifique:")
        print("  ‚Ä¢ Configuraci√≥n del archivo .env")
        print("  ‚Ä¢ Conectividad a internet")
        print("  ‚Ä¢ Credenciales de API de Siigo")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã ¬°Aplicaci√≥n terminada por el usuario!")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")
        sys.exit(1)